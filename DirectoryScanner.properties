###############################
##### Application Config ######
###############################

dateFormat=yyyy-MM-dd HH:mm:ss.SSS

# skip directories that have been scanned (finished) less than this ammount of milliseconds
# -1             --> disable skipping of directories 
# -2 and smaller --> means we will skip any directory that has been scanned (finished) no matter how long ago.
# examples: 86400000 for 1 day, 2630000000 for 1 month, 31560000000 for 1 year
skipDirectoriesScannedAgo=-2

# same as above but with an absolute date value. If this is blank, the relative value from above will be used.
# format = dateFormat 
skipDirectoriesDoneAfter=

#1 = skip files, that have been scanned before (with exact same path & size & lastModified Date) 
#0 = rescan every file we find within directories that are not skipped by the directorySkip mechanism.
# Warning! this seems to be quite a performance problem... I suggest to keep this to 0 and rely on directory skipping.
doneFiles=0

#show messages that have at least this level
#warning: The JTextArea will overflow the memory if you set this to a detailed log level, better look at the console output
status-log-level=ERROR

cacheDoneDirectories=10000

cacheDirIds=10000

queueLength=1000

EndOfStringQueue=2mOD1RKW9qoF4pf1JNX

createIndexes=1

###############################
### Database Configurations ###
###############################
databaseUrl=jdbc:mysql://localhost:3306/
databaseName=files
databaseDriver=com.mysql.jdbc.Driver
databaseUser=root
databasePassword=*****************

dbFallBackDriver=org.h2.Driver
dbFallBackURL=jdbc:h2:~/directory-scanner
dbFallBackUser=sa
dbFallBackPassword=


###############################
## Multi-line SQL Statements ##
###############################
# these are only here in the properties file, because formatting those in java is a mess.
# if you want to change the table structure, you also need to adept a whole lot of other 
# SQL statements to be found in the java class DatabaseHandler.java 

sql_createTableDirectories= \
CREATE TABLE directories ( \
     id INT NOT NULL AUTO_INCREMENT PRIMARY KEY \
    ,path VARCHAR(1000) NOT NULL \
	,scanDir_id INT NULL \
	,scandate DateTime NOT NULL \
	,finished DateTime NULL \
	,FOREIGN KEY (scanDir_id) REFERENCES directories(id) ON DELETE CASCADE \
) ENGINE=InnoDB;

sql_createTableFiles= \
CREATE TABLE files ( \
	 id INT NOT NULL AUTO_INCREMENT PRIMARY KEY \
	,dir_id INT NOT NULL \
	,scanDir_id INT NULL\
	,filename VARCHAR(255) NOT NULL \
	,sha1 BINARY(20) NULL \
	,scandate DateTime NOT NULL \
	,lastmodified DateTime NOT NULL \
	,size BIGINT NOT NULL \
	,FOREIGN KEY (dir_id) REFERENCES directories(id) ON DELETE CASCADE \
	,FOREIGN KEY (scanDir_id) REFERENCES directories(id) ON DELETE CASCADE \
) ENGINE=InnoDB;

sql_createTableFailures= \
CREATE TABLE failures ( \
     id INT NOT NULL AUTO_INCREMENT PRIMARY KEY \
    ,path VARCHAR(1000) NOT NULL \
	,scanDir_id INT NULL \
	,scandate DateTime NOT NULL \
	,size BIGINT NULL \
	,sizeRead BIGINT NULL \
	,error VARCHAR(1000) NOT NULL \
	,FOREIGN KEY (scanDir_id) REFERENCES directories(id) ON DELETE CASCADE \
) ENGINE=InnoDB;

sql_selectFilesBelowPath= \
SELECT \
	d.path, \
	d.id, \
	f.filename, \
	f.id, \
	f.size, \
	f.scandate, \
	f.sha1, \
	f.lastmodified \
FROM files f \
INNER JOIN directories d \
	ON d.id = f.dir_id \
WHERE d.path LIKE ?


sql_selectFilesBelowPath1NotBelowPath2= \
SELECT \
	d.path, \
	d.id, \
	f.filename, \
	f.id, \
	f.size, \
	f.scandate, \
	f.sha1, \
	f.lastmodified \
FROM files f \
INNER JOIN directories d \
	ON d.id = f.dir_id \
WHERE d.path LIKE ? \
AND NOT EXISTS( \
	SELECT ff.id \
	FROM files ff \
	INNER JOIN directories dd \
		ON dd.id = ff.dir_id \
	WHERE ff.sha1 = f.sha1 \
	AND dd.path LIKE ? \
)


sql_selectFilesWithDuplicatesBelowPath= \
SELECT \
	d.path, \
	d.id, \
	f.filename, \
	f.id, \
	f.size, \
	f.scandate, \
	f.sha1, \
	f.lastmodified \
FROM files f \
INNER JOIN directories d \
	ON d.id = f.dir_id \
WHERE EXISTS ( /* other files with the same sha1 exist (duplicates) */ \
	SELECT ff.id \
	FROM files ff \
	INNER JOIN directories dd \
		ON dd.id = ff.dir_id \
	WHERE ff.sha1 = f.sha1 \
	AND ff.id <> f.id \
) AND EXISTS ( /* one of those duplicates is within the given path */ \
	SELECT ff2.id \
	FROM files ff2 \
	INNER JOIN directories dd2 \
		ON dd2.id = ff2.dir_id \
	WHERE ff2.sha1 = f.sha1 \
	AND dd2.path LIKE ? \
)


sql_selectFilesWithMoreDuplicatesBelowPath= \
SELECT \
	d.path, \
	d.id, \
	f.filename, \
	f.id, \
	f.size, \
	f.scandate, \
	f.sha1, \
	f.lastmodified \
FROM files f \
INNER JOIN directories d \
	ON d.id = f.dir_id \
WHERE ( /* at least given number of those duplicates are within the given path */ \
	SELECT count(ff2.id) \
	FROM files ff2 \
	INNER JOIN directories dd2 \
		ON dd2.id = ff2.dir_id \
	WHERE ff2.sha1 = f.sha1 \
	AND dd2.path LIKE ? \
) >= ?

sql_selectFilesWithDuplicatesBelowTwoPaths= \
SELECT \
	d.path, \
	d.id, \
	f.filename, \
	f.id, \
	f.size, \
	f.scandate, \
	f.sha1, \
	f.lastmodified \
FROM files f \
INNER JOIN directories d \
	ON d.id = f.dir_id \
WHERE EXISTS ( /* other files with the same sha1 exist (duplicates) */ \
	SELECT ff.id \
	FROM files ff \
	INNER JOIN directories dd \
		ON dd.id = ff.dir_id \
	WHERE ff.sha1 = f.sha1 \
	AND ff.id <> f.id \
) AND EXISTS ( /* one of those duplicates is within the given path1 */ \
	SELECT ff2.id \
	FROM files ff2 \
	INNER JOIN directories dd2 \
		ON dd2.id = ff2.dir_id \
	WHERE ff2.sha1 = f.sha1 \
	AND dd2.path LIKE ? \
) AND EXISTS ( /* one of those duplicates is within the given path2 */ \
	SELECT ff3.id \
	FROM files ff3 \
	INNER JOIN directories dd3 \
		ON dd3.id = ff3.dir_id \
	WHERE ff3.sha1 = f.sha1 \
	AND dd3.path LIKE ? \
)

sql_selectSha1Collisions= \
SELECT \
	d.path, \
	d.id, \
	f.filename, \
	f.id, \
	f.size, \
	f.scandate, \
	f.sha1, \
	f.lastmodified \
FROM files f \
INNER JOIN directories d \
	ON d.id = f.dir_id \
WHERE EXISTS ( /* same sha1 but different size */ \
	SELECT ff.id \
	FROM files ff \
	INNER JOIN directories dd \
		ON dd.id = ff.dir_id \
	WHERE ff.sha1 = f.sha1 \
	AND ff.size <> f.size \
) \
OR EXISTS ( /* files with same name and path but different id */ \
	SELECT ff2.id \
	FROM files ff2 \
	INNER JOIN directories dd2 \
		ON dd2.id = ff2.dir_id \
	WHERE ff2.id <> f.id \
	AND ff2.filename = f.filename \
	AND dd2.path = d.path \
) \
ORDER BY f.sha1

sql_selectFileDetails= \
SELECT \
	f.size, \
	f.lastmodified, \
	f.scandate \
FROM files f \
INNER JOIN directories d \
	ON d.id = f.dir_id \
WHERE d.path = ? \
  AND f.filename = ? \
ORDER BY f.sha1
